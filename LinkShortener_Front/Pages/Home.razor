@page "/"
@inject IJSRuntime JS
@inject HttpClient Http

<div class="btn-postion">
    <button class="btn fade-in" @onclick="ToggleDarkMode">🌓 Tema</button>
</div>
<div class="container">
    <h2 class="fade-in">Encurtador de links</h2>
    <p class="fade-in">Insira o link que deseja encurtar:</p>

    <input type="text" placeholder="https://..." @bind="originalUrl" @ref="inputRef" class="fade-in" />
    <button class="btn fade-in" @onclick="EncurtarLink">Converter</button>

    @if (!string.IsNullOrWhiteSpace(shortenedUrl))
    {
        <div class="link-section fade-in">
            <p>Link encurtado: <a href="@shortenedUrl" target="_blank">@shortenedUrl</a></p>
            <button class="btn" @onclick="CopiarLink">Copiar</button>
            <div class="message">✅ Link encurtado com sucesso!</div>
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="error fade-in">@errorMessage</div>
    }
</div>

@code {
    private string originalUrl = string.Empty;
    private string shortenedUrl = string.Empty;
    private string errorMessage = string.Empty;

    private ElementReference inputRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setTimeout", 100);
            await JS.InvokeVoidAsync("eval", "document.querySelector('input').focus()");
        }
    }

    private async Task EncurtarLink()
    {
        errorMessage = "";
        shortenedUrl = "";

        if (string.IsNullOrWhiteSpace(originalUrl))
        {
            errorMessage = "Por favor, insira uma URL válida.";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/shortUrl", originalUrl);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ShortenResponse>();
                var baseUrl = Http.BaseAddress?.ToString().TrimEnd('/');
                shortenedUrl = $"{baseUrl}/r/{result!.ShortCode}";
            }
            else
            {
                errorMessage = "Erro ao encurtar o link.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Erro inesperado. Verifique sua conexão ou tente novamente.";
        }
    }

    private async Task CopiarLink()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", shortenedUrl);
    }

    private class ShortenResponse
    {
        public string ShortCode { get; set; } = string.Empty;
        public string FullUrl { get; set; } = string.Empty;
    }

    private async Task ToggleDarkMode()
    {
        await JS.InvokeVoidAsync("eval", @"
        document.body.classList.toggle('dark-mode');
        localStorage.setItem('theme', document.body.classList.contains('dark-mode') ? 'dark' : 'light');
    ");
    }
}